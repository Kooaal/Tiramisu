// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package get.me.a.tiramisu.dto;

import get.me.a.tiramisu.dto.RechercheTiramisuDTO;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect RechercheTiramisuDTO_Roo_Finder {
    
    public static Long RechercheTiramisuDTO.countFindRechercheTiramisuDTOByCodepostalLike(String codepostal) {
        if (codepostal == null || codepostal.length() == 0) throw new IllegalArgumentException("The codepostal argument is required");
        codepostal = codepostal.replace('*', '%');
        if (codepostal.charAt(0) != '%') {
            codepostal = "%" + codepostal;
        }
        if (codepostal.charAt(codepostal.length() - 1) != '%') {
            codepostal = codepostal + "%";
        }
        EntityManager em = RechercheTiramisuDTO.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RechercheTiramisuDTO AS o WHERE LOWER(o.codepostal) LIKE LOWER(:codepostal)", Long.class);
        q.setParameter("codepostal", codepostal);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<RechercheTiramisuDTO> RechercheTiramisuDTO.findRechercheTiramisuDTOByCodepostalLike(String codepostal) {
        if (codepostal == null || codepostal.length() == 0) throw new IllegalArgumentException("The codepostal argument is required");
        codepostal = codepostal.replace('*', '%');
        if (codepostal.charAt(0) != '%') {
            codepostal = "%" + codepostal;
        }
        if (codepostal.charAt(codepostal.length() - 1) != '%') {
            codepostal = codepostal + "%";
        }
        EntityManager em = RechercheTiramisuDTO.entityManager();
        TypedQuery<RechercheTiramisuDTO> q = em.createQuery("SELECT o FROM RechercheTiramisuDTO AS o WHERE LOWER(o.codepostal) LIKE LOWER(:codepostal)", RechercheTiramisuDTO.class);
        q.setParameter("codepostal", codepostal);
        return q;
    }
    
    public static TypedQuery<RechercheTiramisuDTO> RechercheTiramisuDTO.findRechercheTiramisuDTOByCodepostalLike(String codepostal, String sortFieldName, String sortOrder) {
        if (codepostal == null || codepostal.length() == 0) throw new IllegalArgumentException("The codepostal argument is required");
        codepostal = codepostal.replace('*', '%');
        if (codepostal.charAt(0) != '%') {
            codepostal = "%" + codepostal;
        }
        if (codepostal.charAt(codepostal.length() - 1) != '%') {
            codepostal = codepostal + "%";
        }
        EntityManager em = RechercheTiramisuDTO.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM RechercheTiramisuDTO AS o WHERE LOWER(o.codepostal) LIKE LOWER(:codepostal)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<RechercheTiramisuDTO> q = em.createQuery(queryBuilder.toString(), RechercheTiramisuDTO.class);
        q.setParameter("codepostal", codepostal);
        return q;
    }
    
}
